{
  "name": "flower-power",
  "version": "0.3.0",
  "description": "node.js lib for the Parrot Flower Power",
  "main": "index.js",
  "scripts": {
    "test": "jshint *.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sandeepmistry/node-flower-power.git"
  },
  "keywords": [
    "Parrot",
    "Flower",
    "Power",
    "Flower Power"
  ],
  "author": {
    "name": "Sandeep Mistry",
    "email": "sandeep.mistry@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/sandeepmistry/node-flower-power/issues"
  },
  "devDependencies": {
    "jshint": "~2.3.0",
    "async": "~0.2.9",
    "bleno": "~0.1.8"
  },
  "dependencies": {
    "noble-device": "^1.1.0"
  },
  "readme": "node-flower-power\n=================\n\n[![Analytics](https://ga-beacon.appspot.com/UA-56089547-1/sandeepmistry/node-flower-power?pixel)](https://github.com/igrigorik/ga-beacon)\n\nnode.js lib for the [Parrot Flower Power](http://www.parrot.com/usa/products/flower-power/)\n\n\nInstall\n-------\n\n```sh\nnpm install flower-power\n```\n\nUsage\n-----\n\n```javascript\nvar FlowerPower = require('flower-power');\n```\n\n__Discover__\n\n```javascript\n// Discover one Flower Power\nFlowerPower.discover(callback(flowerPower));\n\n// Discover all Flower Power's\nFlowerPower.discoverAll(callback(flowerPower));\n```\n\n__Connect and Setup__\n\n```javascript\nflowerPower.connectAndSetup(callback(error));\n```\n\n__Disconnect__\n\n```javascript\nflowerPower.disconnect(callback(error));\n```\n\n__Device Info__\n\n```javascript\nflowerPower.readSystemId(callback(error, systemId));\n\nflowerPower.readSerialNumber(callback(error, serialNumber));\n\nflowerPower.readFirmwareRevision(callback(error, firmwareRevision));\n\nflowerPower.readHardwareRevision(callback(error, hardwareRevision));\n\nflowerPower.readManufacturerName(callback(error, manufacturerName));\n```\n\n__Other Info__\n\n```javascript\nflowerPower.readFriendlyName(callback(error, friendlyName));\n\nflowerPower.writeFriendlyName(friendlyName, callback(error));\n\n\nflowerPower.readColor(callback(error, color));\n```\n\n__Battery Level__\n\n```javascript\n// batteryLevel range is 0 - 100\nflowerPower.readBatteryLevel(callback(error, batteryLevel));\n```\n\n__Sunlight__\n\n```javascript\n// sunlight units are photons per square meter\nflowerPower.readSunlight(callback(error, sunlight));\n```\n\n__Soil Temperature__\n\n```javascript\nflowerPower.readSoilTemperature(callback(error, temperature)); // C\n```\n\n__Air Temperature__\n\n```javascript\nflowerPower.readAirTemperature(callback(error, temperature)); // C\n```\n\n__Soil Moisture__\n\n```javascript\n// soilMoisture units is percentage (%)\nflowerPower.readSoilMoisture(callback(error, soilMoisture));\n```\n\n__Calibrated__\n\n```javascript\n// firmware versions 1.1 and above\n\nflowerPower.readCalibratedSoilMoisture(callback(error, soilMoisture)); // %\n\nflowerPower.readCalibratedAirTemperature(callback(error, temperature)); // C\n\nflowerPower.readCalibratedSunlight(callback(error, sunlight)); // photons per square meter (mol/mÂ²/d)\n\nflowerPower.readCalibratedEa(callback(error, ea)); // no units\n\nflowerPower.readCalibratedEcb(callback(error, ecb)); // dS/m\n\nflowerPower.readCalibratedEcPorous(callback(error, ecPorous)); // dS/m\n```\n\n__Live mode__\n\n```javascript\n// sunlightChange, soilTemperatureChange, airTemperatureChange,\n// soilMoistureChange events are emitted (see below)\n\nflowerPower.enableLiveMode(callback(error));\n\nflowerPower.disableLiveMode(callback(error));\n```\n\n__Calibrated live mode__\n\n```javascript\n// firmware versions 1.1 and above\n\n// calibratedSoilMoistureChange, calibratedAirTemperatureChange,\n// calibratedSunlightChange, calibratedEaChange, calibratedEcbChange,\n// calibratedEcPorousChange events are emitted (see below)\n\nflowerPower.enableCalibratedLiveMode(callback(error));\n\nflowerPower.disableCalibratedLiveMode(callback(error));\n```\n\n__LED__\n\n```javascript\nflowerPower.ledFade(callback(error));\n\nflowerPower.ledOff(callback(error));\n```\n\nEvents\n------\n\n__Disconnect__\n\n```javascript\nflowerPower.on('disconnect', callback);\n```\n\n__Sunlight Change__\n\n```javascript\nflowerPower.on('sunlightChange', callback(sunlight));\n```\n\n__Soil Temperature Change__\n\n```javascript\nflowerPower.on('soilTemperatureChange', callback(soilTemperature));\n```\n\n__Air Temperature Change__\n\n```javascript\nflowerPower.on('airTemperatureChange', callback(airTemperature));\n```\n\n__Soil Moisture Change__\n\n```javascript\nflowerPower.on('soilMoistureChange', callback(soilMoisture));\n```\n\n__Calibrated Change__\n```javascript\nflowerPower.on('calibratedSoilMoistureChange', callback(soilMoisture));\nflowerPower.on('calibratedAirTemperatureChange', callback(temperature));\nflowerPower.on('calibratedSunlightChange', callback(sunlight));\nflowerPower.on('calibratedEaChange', callback(ea));\nflowerPower.on('calibratedEcbChange', callback(ecb));\nflowerPower.on('calibratedEcPorousChange', callback(ecPorous));\n```\n\n\nTODO\n----\n\n  * ~~discover~~\n  * ~~connect~~\n  * ~~discover~~\n  * ~~discover services and characteristics~~\n  * ~~read device info~~\n    * ~~system id~~\n    * ~~serial number~~\n    * ~~firmware revision~~\n    * ~~hardware revision~~\n  * ~~read battery level~~\n  * ~~read sunlight~~\n  * ~~read temperature~~\n  * ~~read soil moisture~~\n  * ~~live mode~~\n    * ~~sunlight~~\n    * ~~temperature~~\n    * ~~soil moisture~~\n  * ~~read fertilizer~~\n  * read historic data\n    * sunlight\n    * temperature\n    * soil moisture\n    * fertizler\n  * ~~__use calculations to convert values__ (currently using lookup table)~~\n\n",
  "readmeFilename": "README.md",
  "_id": "flower-power@0.3.0",
  "_from": "flower-power@"
}
